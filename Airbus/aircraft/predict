Project Summary:
This project focuses on exploring the relationship between various features of Airbus aircraft and their impact on the aircraft’s age and estimated market value. Using the Airbus Aircraft Dataset, which contains technical specifications, operational data, and categorical variables, the analysis uncovers patterns affecting aircraft lifecycle and depreciation. Both numerical and categorical variables were examined through statistical summaries and visualizations.

About the Dataset:
The dataset includes information such as aircraft model, production year, number of engines, seating capacity, operator, operational status (active, stored, retired), and other metadata.

Key Features:

Model (e.g., A320, A330)

Status (active, parked, retired)

First flight year (used to calculate age)

Number of engines

Seating capacity

Aircraft type (passenger or cargo)

Operator

Age (calculated as current year minus first flight year)

Estimated value (target variable)

Objective:
To analyze how aircraft age and estimated value relate to various features, identify influential factors, and detect missing data and outliers.

Studies Conducted:

Data cleaning and preprocessing to handle missing values and outliers

Feature engineering including calculation of aircraft age and grouping models

Exploratory Data Analysis using statistical summaries and visualizations

Correlation analysis among numerical variables

Statistical tests (ANOVA) to compare value across models and engine counts

Results:

Aircraft age strongly correlates with operational status; newer aircraft are typically active, older ones retired or stored

Seating capacity and model type are good predictors of aircraft size and value

Negative correlation between age and estimated value shows depreciation over time

Wide age distribution observed in models like A320, whereas newer models such as A350 are mostly under 10 years old

Conclusions:
The analysis provides insights into how Airbus aircraft characteristics influence their operational lifecycle and market value, offering useful information for fleet planning and acquisition decisions.

Uçak Yaşı ve Değerinin Tahmini – Keşifsel Veri Analizi (EDA)

Proje Özeti:
Bu proje, Airbus uçaklarının çeşitli özellikleri ile uçak yaşı ve tahmini piyasa değeri arasındaki ilişkiyi keşfetmeye odaklanmıştır. Teknik özellikler, operasyonel veriler ve kategorik değişkenlerden oluşan Airbus Uçak Veri Seti kullanılarak, uçakların yaşam döngüsünü ve değer kaybını etkileyen desenler ortaya çıkarılmıştır. Sayısal ve kategorik değişkenler istatistiksel özetler ve görselleştirmelerle incelenmiştir.

Veri Seti Hakkında:
Veri setinde uçak modeli, üretim yılı, motor sayısı, koltuk kapasitesi, operatör, operasyon durumu (aktif, parkta, emekli) ve diğer metadata bilgileri bulunmaktadır.

Anahtar Özellikler:

Model (örn. A320, A330)

Durum (aktif, parkta, emekli)

İlk uçuş yılı (yaş hesaplamasında kullanılır)

Motor sayısı

Koltuk kapasitesi

Uçak tipi (yolcu veya kargo)

Operatör

Yaş (güncel yıldan ilk uçuş yılı çıkarılarak hesaplanır)

Tahmini değer (hedef değişken)

Amaç:
Uçak yaşı ve tahmini değerin çeşitli özelliklerle ilişkisini analiz etmek, etkili faktörleri belirlemek ve eksik veri ile aykırı değerleri tespit etmektir.

Yapılan Çalışmalar:

Eksik ve aykırı verilerin temizlenmesi ve ön işlenmesi

Uçak yaşı hesaplanması ve model sınıflandırması gibi özellik mühendisliği

İstatistiksel özetler ve görselleştirmeler ile keşifsel veri analizi

Sayısal değişkenler arasında korelasyon analizi

Farklı model ve motor sayıları arasında değer karşılaştırması için ANOVA testi

Sonuçlar:

Uçak yaşı ile operasyon durumu arasında güçlü ilişki; yeni uçaklar genellikle aktif, eski uçaklar emekli veya parkta

Koltuk kapasitesi ve model tipi, uçak büyüklüğü ve değerinin iyi göstergeleri

Yaş ile tahmini değer arasında negatif korelasyon, zamanla değer kaybını gösterir

A320 gibi modellerde geniş yaş dağılımı, A350 gibi yeni modellerde ise çoğunlukla 10 yaş altı yoğunluk gözlenmiştir   


Import Libraries

import random
import numpy as np

def set_global_random_seed(seed: int = 42):
    """Sets a global random seed for reproducibility across various libraries."""
    random.seed(seed)        # Python random modülü
    np.random.seed(seed)     # NumPy random modülü

# Seed Ayarlama
set_global_random_seed(seed=7)

# Sonrasında senin diğer importlar ve kodların devam eder
import pandas as pd # Data Manipulation
import matplotlib.pyplot as plt
import seaborn as sns
import joblib
from sklearn.metrics import r2_score
import xgboost as xgb
from sklearn.model_selection import KFold
from sklearn.metrics import mean_squared_error
import warnings
warnings.filterwarnings("ignore") 


Load and Read Dataset

data = pd.read_csv("/kaggle/input/airbus-aircraft-dataset/airbus_aircrafts.csv")




First Look at the Dataset

def add_random_missing_values_aircraft(dataframe: pd.DataFrame,
                                      missing_rate: float = 0.05,
                                      random_state: int = 42,
                                      exclude_columns: list = None) -> pd.DataFrame:
    """Add random missing values (NaN) to a dataframe excluding specified columns."""

    np.random.seed(random_state)
    df_missing = dataframe.copy()

    if exclude_columns:
        columns_to_include = [col for col in dataframe.columns if col not in exclude_columns]
    else:
        columns_to_include = dataframe.columns.tolist()

    if not columns_to_include:
        raise ValueError("All columns excluded, no missing values can be added.")

    df_size = len(columns_to_include) * dataframe.shape[0]
    num_missing = int(df_size * missing_rate)

    included_col_indices = [dataframe.columns.get_loc(col) for col in columns_to_include]

    row_indices = np.random.randint(0, dataframe.shape[0], num_missing)
    col_indices = np.random.choice(included_col_indices, num_missing)

    for row_idx, col_idx in zip(row_indices, col_indices):
        df_missing.iat[row_idx, col_idx] = np.nan

    return df_missing


# Örnek kullanım:
# exclude_columns olarak 'model', 'operator' gibi kategorik sütunları veya değiştirmek istemediklerini verebilirsin
df_aircraft_missing = add_random_missing_values_aircraft(data, missing_rate=0.05, random_state=42, exclude_columns=['model', 'operator', 'status'])

# Veri setinden örnekler
print(df_aircraft_missing.head())
print(df_aircraft_missing.tail())
print(df_aircraft_missing.sample(10))

# Veri hakkında genel bilgi
print("Veri Setinin Boyutu: ", df_aircraft_missing.shape)
df_aircraft_missing.info()


# This Python 3 environment comes with many helpful analytics libraries installed
# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python
# For example, here's several helpful packages to load

import numpy as np # linear algebra
import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)

# Input data files are available in the read-only "../input/" directory
# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory

from pathlib import Path

DATA_DIR = Path('../input/airbus-aircrafts-sample-dataset')
img_list = list(DATA_DIR.glob('images/*.jpg'))
print("Number of images: {}".format(len(img_list)))
#print(*img_list, sep = "\n")

# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using "Save & Run All" 
# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session
Number of images: 103
import random
import PIL

pickone = random.choice(img_list)
img = PIL.Image.open(pickone)
print(img.size)
display(img)
(2560, 2560)

import ast

# convert a string record into a valid python object
def f(x): 
    return ast.literal_eval(x.rstrip('\r\n'))

df = pd.read_csv(DATA_DIR / "annotations.csv", 
                converters={'geometry': f})
df.head(10)
id	image_id	geometry	class
0	1	4f833867-273e-4d73-8bc3-cb2d9ceb54ef.jpg	[(135, 522), (245, 522), (245, 600), (135, 600...	Airplane
1	2	4f833867-273e-4d73-8bc3-cb2d9ceb54ef.jpg	[(1025, 284), (1125, 284), (1125, 384), (1025,...	Airplane
2	3	4f833867-273e-4d73-8bc3-cb2d9ceb54ef.jpg	[(1058, 1503), (1130, 1503), (1130, 1568), (10...	Airplane
3	4	4f833867-273e-4d73-8bc3-cb2d9ceb54ef.jpg	[(813, 1518), (885, 1518), (885, 1604), (813, ...	Airplane
4	5	4f833867-273e-4d73-8bc3-cb2d9ceb54ef.jpg	[(594, 938), (657, 938), (657, 1012), (594, 10...	Airplane
5	6	4f833867-273e-4d73-8bc3-cb2d9ceb54ef.jpg	[(451, 725), (524, 725), (524, 798), (451, 798...	Airplane
6	7	4f833867-273e-4d73-8bc3-cb2d9ceb54ef.jpg	[(1543, 1437), (1614, 1437), (1614, 1497), (15...	Airplane
7	8	4f833867-273e-4d73-8bc3-cb2d9ceb54ef.jpg	[(1485, 1370), (1561, 1370), (1561, 1437), (14...	Airplane
8	9	4f833867-273e-4d73-8bc3-cb2d9ceb54ef.jpg	[(1968, 1624), (2053, 1624), (2053, 1687), (19...	Airplane
9	10	4f833867-273e-4d73-8bc3-cb2d9ceb54ef.jpg	[(1659, 1674), (1733, 1674), (1733, 1746), (16...	Airplane
def getBounds(geometry):
    try: 
        arr = np.array(geometry).T
        xmin = np.min(arr[0])
        ymin = np.min(arr[1])
        xmax = np.max(arr[0])
        ymax = np.max(arr[1])
        return (xmin, ymin, xmax, ymax)
    except:
        return np.nan

def getWidth(bounds):
    try: 
        (xmin, ymin, xmax, ymax) = bounds
        return np.abs(xmax - xmin)
    except:
        return np.nan

def getHeight(bounds):
    try: 
        (xmin, ymin, xmax, ymax) = bounds
        return np.abs(ymax - ymin)
    except:
        return np.nan

# Create bounds, width and height
df.loc[:,'bounds'] = df.loc[:,'geometry'].apply(getBounds)
df.loc[:,'width'] = df.loc[:,'bounds'].apply(getWidth)
df.loc[:,'height'] = df.loc[:,'bounds'].apply(getHeight)

# Display head
df.head(10)
id	image_id	geometry	class	bounds	width	height
0	1	4f833867-273e-4d73-8bc3-cb2d9ceb54ef.jpg	[(135, 522), (245, 522), (245, 600), (135, 600...	Airplane	(135, 522, 245, 600)	110	78
1	2	4f833867-273e-4d73-8bc3-cb2d9ceb54ef.jpg	[(1025, 284), (1125, 284), (1125, 384), (1025,...	Airplane	(1025, 284, 1125, 384)	100	100
2	3	4f833867-273e-4d73-8bc3-cb2d9ceb54ef.jpg	[(1058, 1503), (1130, 1503), (1130, 1568), (10...	Airplane	(1058, 1503, 1130, 1568)	72	65
3	4	4f833867-273e-4d73-8bc3-cb2d9ceb54ef.jpg	[(813, 1518), (885, 1518), (885, 1604), (813, ...	Airplane	(813, 1518, 885, 1604)	72	86
4	5	4f833867-273e-4d73-8bc3-cb2d9ceb54ef.jpg	[(594, 938), (657, 938), (657, 1012), (594, 10...	Airplane	(594, 938, 657, 1012)	63	74
5	6	4f833867-273e-4d73-8bc3-cb2d9ceb54ef.jpg	[(451, 725), (524, 725), (524, 798), (451, 798...	Airplane	(451, 725, 524, 798)	73	73
6	7	4f833867-273e-4d73-8bc3-cb2d9ceb54ef.jpg	[(1543, 1437), (1614, 1437), (1614, 1497), (15...	Airplane	(1543, 1437, 1614, 1497)	71	60
7	8	4f833867-273e-4d73-8bc3-cb2d9ceb54ef.jpg	[(1485, 1370), (1561, 1370), (1561, 1437), (14...	Airplane	(1485, 1370, 1561, 1437)	76	67
8	9	4f833867-273e-4d73-8bc3-cb2d9ceb54ef.jpg	[(1968, 1624), (2053, 1624), (2053, 1687), (19...	Airplane	(1968, 1624, 2053, 1687)	85	63
9	10	4f833867-273e-4d73-8bc3-cb2d9ceb54ef.jpg	[(1659, 1674), (1733, 1674), (1733, 1746), (16...	Airplane	(1659, 1674, 1733, 1746)	74	72
unique, counts = np.unique(df['class'], return_counts=True)
pd.DataFrame({'class': unique, 'count': counts})
class	count
0	Airplane	3316
1	Truncated_airplane	109
unique, counts = np.unique(df['image_id'], return_counts=True)
#per_image = np.asarray((unique, counts)).T
print("Minimum aircrafts per image: {}".format(np.min(counts)))
print("Maximum aircrafts per image: {}".format(np.max(counts)))
Minimum aircrafts per image: 5
Maximum aircrafts per image: 92
import seaborn as sns
sns.displot(df['width'])
<seaborn.axisgrid.FacetGrid at 0x7f4848379250>

sns.displot(df['height'])
<seaborn.axisgrid.FacetGrid at 0x7f482ba2b550>

import os.path
import PIL.ImageDraw

pickone = random.choice(img_list)
img = PIL.Image.open(pickone)
draw = PIL.ImageDraw.Draw(img)

for k, row in df[df['image_id'] == os.path.basename(pickone)].iterrows():
    draw.polygon(row['geometry'], outline=(255,0,0))
    draw.text(row['geometry'][0], row['class'], fill=(255,0,0))

display(img)
#img.save('/kaggle/working/' + os.path.basename(pickone))

 1. Eksik Değer Analizi
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

missing = pd.DataFrame(df.isna().sum()).rename(columns={0:"Miss_values"})
missing["Miss_Percent"] = missing["Miss_values"] / len(df)

print(missing.head())

only_miss_val = missing[missing["Miss_values"] > 0]

plt.figure(figsize=(8,4))
sns.barplot(data=only_miss_val, y=only_miss_val.index, x="Miss_values")
plt.title("Eksik Değerlerin Sayısı")
plt.xlabel("Eksik Değer Sayısı")
plt.tight_layout()
plt.show()

2. Çoğaltılmış Kayıtlar (Duplicate) Kontrolü
print("Çoğaltılmış kayıt sayısı:", df.duplicated().sum())

3. Her Kolondaki Benzersiz Değerlerin Sayısı
def unique_values(df):
    for col in df.columns:
        print(f"{col} kolonundaki benzersiz değer sayısı: {df[col].nunique()}")
        print("=="*20)

unique_values(df)

4. Özet İstatistikler
def get_summary(df):
    df_desc = pd.DataFrame(df.describe(include='all').T)
    df_summary = pd.DataFrame({
        'dtype': df.dtypes,
        'Count': df.count(),
        'unique': df.nunique(),
        'missing': df.isna().sum(),
        'duplicated': df.duplicated().sum(),
        'mean': df_desc['mean'].values,
        'min': df_desc['min'].values,
        'std': df_desc['std'].values,
        '25%': df_desc['25%'].values,
        '50%': df_desc['50%'].values,
        '75%': df_desc['75%'].values,
        'max': df_desc['max'].values
    })
    return df_summary.style.background_gradient(cmap='YlGnBu', subset=['mean','std','min','25%','50%','75%','max']).set_properties(**{'border': '1.5px solid black'})

get_summary(df)

5. Sayısal ve Kategorik Değişkenlerin Ayrılması
numerical_columns = [col for col in df.columns if df[col].dtype in ['float64', 'int64']]
categorical_columns = [col for col in df.columns if df[col].dtype == 'object']

print(f"Sayısal kolonlar: {numerical_columns}")
print(f"Kategorik kolonlar: {categorical_columns}")

6. Hedef Değişken Dağılımı (Örnek: Uçak Fiyatı)
fig = plt.figure(figsize=(12,6))

box_axes = fig.add_axes([0.1, 0.1, 0.35, 0.8])
sns.kdeplot(x=df["Fiyat"], color='blue', ax=box_axes)
box_axes.set_title('KDE Plot')
box_axes.set_xlabel('Fiyat')

hist_axes = fig.add_axes([0.55, 0.1, 0.35, 0.8])
sns.histplot(df["Fiyat"], kde=False, color='#967bb6', ax=hist_axes)
hist_axes.set_title('Dağılım')
hist_axes.set_xlabel('Fiyat')
hist_axes.set_ylabel('Frekans')

plt.show()

7. Korelasyon Matrisi ve Heatmap
import numpy as np

corr_matrix = df.corr(numeric_only=True)
mask = np.triu(np.ones_like(corr_matrix, dtype=bool))

plt.figure(figsize=(10,8))
sns.heatmap(corr_matrix, mask=mask, annot=True, fmt=".3f", cmap='coolwarm', vmin=-1, vmax=1, linewidths=0.5, cbar_kws={'shrink':0.8})
plt.title("Korelasyon Matrisi")
plt.tight_layout()
plt.show()

8. Örneğin, Motor Gücü ve Fiyat İlişkisi Scatterplot
sns.scatterplot(data=df, x="Motor_Gucu", y="Fiyat", hue="Ucak_Tipi", palette="tab10")
plt.title("Motor Gücü ve Fiyat İlişkisi")
plt.xlabel("Motor Gücü")
plt.ylabel("Fiyat")
plt.legend(title="Uçak Tipi")
plt.show()

9. Segmentasyon Örneği: Fiyat Segmentlerine Göre Ortalama Performans
df['Fiyat_Grubu'] = pd.cut(df['Fiyat'], bins=[0, 500000, 1000000, 2000000, 5000000], labels=['Düşük', 'Orta', 'Yüksek', 'Premium'])
avg_performance = df.groupby('Fiyat_Grubu')['Performans_Skoru'].mean()

avg_performance.plot(kind='bar', color='skyblue')
plt.title('Fiyat Gruplarına Göre Ortalama Performans')
plt.xlabel('Fiyat Grubu')
plt.ylabel('Ortalama Performans Skoru')
plt.xticks(rotation=0)
plt.show()





